<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
         creationComplete="onCreationComplete()" 
         xmlns:view="com.broceliand.ui.pearlBar.view.*" 
         preinitialize="init()"
	      paddingRight="0" paddingLeft="0" rollOver="onRollOver()" rollOut="onRollOut()">
		
      <mx:Image
			id="minusScale"
         x="0"
			source="{PearlDeckAssets.ZOOM_MINUS}"
         mouseDown="minusDown(event)" mouseUp="minusUpOrOut()" mouseOut="minusUpOrOut()"
			click="onClickMinus()" />		
		<mx:Image
         id="zeroZoom"
         x="26"
         source="{PearlDeckAssets.ZOOM_ZERO}"
         click="onClickReset()" />
      <mx:Canvas id="scaleSliderContainer">
         <view:ZoomSlider  
   				id="scaleSlider"
				   x="16"
   				thumbOffset="-2"
   				value="1"
   				minimum="0"
   				maximum="1"
   				snapInterval="{ZoomModel.ZOOM_STEP}"
   				liveDragging="true"
   				change="updateScale()"
   				showDataTip="false" />
      </mx:Canvas>
      
		<mx:Image
         x="50"
			id="plusScale"
			source="{}"
         mouseDown="plusDown(event)" mouseUp="plusUpOrOut()" mouseOut="plusUpOrOut()"
			click="onClickPlus()" />
      <mx:Text id="zoomLabel" y="45" width="100%"
               htmlText="{BroLocale.getText('pearldeck.zoom')}"
               textAlign="center" selectable="false"
               color="#505050"/>
	
	<mx:Script>
		<![CDATA[
         import com.broceliand.ApplicationManager;
         import com.broceliand.EmbedManager;
         import com.broceliand.assets.PearlDeckAssets;
         import com.broceliand.graphLayout.model.IPTNode;
         import com.broceliand.graphLayout.visual.IPTVisualGraph;
         import com.broceliand.ui.effects.SmoothSetter;
         import com.broceliand.ui.model.ZoomModel;
         import com.broceliand.ui.navBar.NavBar;
         import com.broceliand.ui.pearl.IUIPearl;
         import com.broceliand.ui.pearlBar.Footer;
         import com.broceliand.ui.renderers.TitleRenderer;
         import com.broceliand.ui.util.AssetsManager;
         import com.broceliand.util.BroLocale;
         import com.broceliand.util.PTKeyboardListener;
         import com.broceliand.util.logging.BroLogger;
         import com.broceliand.util.logging.Log;
         
         import mx.containers.Canvas;
         import mx.core.Container;
         import mx.core.UIComponent;
         import mx.effects.Zoom;
         import mx.events.FlexEvent;
         
         import org.un.cava.birdeye.ravis.assets.icons.EmbeddedIcons;
         import org.un.cava.birdeye.ravis.utils.LogUtil;
         import org.un.cava.birdeye.ravis.utils.events.VGraphEvent;
			
         private static const DELAY:int = 400;
         private static const MAX_COUNT:int = 1000;
         
		  private static var log:BroLogger = Log.getLogger("com.broceliand.ui.pearlbar.view.ZoomScale");
		  private var _zoomModel:ZoomModel;
        private var _zoomActionTimer:Timer;
		  [Bindable]
		  private var _isEmbed:Boolean;
		  
		  private function init():void {
           var am:ApplicationManager = ApplicationManager.getInstance();
		     _isEmbed = am.isEmbed();
           if (_isEmbed) {
              visible = false;
           }
           am.addEventListener(ApplicationManager.FOCUS_CHANGE_EVENT, onApplicationFocusChange);
		  } 
		  override protected function createChildren():void {
		  	super.createChildren();
		  	
		  	if (_isEmbed) {
		  		plusScale.source= AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_EMBED_PLUS);
		  		minusScale.source= AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_EMBED_MINUS);
				plusScale.move(85,0);
				updateScaleSliderWidth();
            zeroZoom.visible = zeroZoom.includeInLayout = false;
				zoomLabel.visible = zoomLabel.includeInLayout = false
            minusScale.y = -1;
            plusScale.y = -1;
            
		  	}else {
		  		plusScale.source = AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_PLUS);
		  		minusScale.source = AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_MINUS);
            scaleSlider.visible = scaleSlider.includeInLayout = false;
		  		scaleSlider.percentWidth = 95;
            minusScale.x = 0;
            zeroZoom.x = 40; 
            plusScale.x = 69;
		  	}	
		  }
		  public function isEmbedMode():Boolean {
		  	return _isEmbed;
		  }
         
         public function updateScaleSliderWidth():void {
            if(_isEmbed) {
               scaleSlider.width = 80;
            }
         }
         
         private function onApplicationFocusChange(event:Event):void {
            var am:ApplicationManager = ApplicationManager.getInstance();
            if (am.isEmbed()) {
               visible = am.isApplicationFocused;
            } 
         }
         
         override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            updateScaleSliderWidth();
         }
		  
			public function set model(zoomModel:ZoomModel):void {
				if (_zoomModel != null) {
					_zoomModel.removeEventListener(FlexEvent.DATA_CHANGE, onModelChanged); 
				}
				_zoomModel = zoomModel;
				_zoomModel.addEventListener(FlexEvent.DATA_CHANGE, onModelChanged);
				restoreScaleSliderValue();
			}
			public function get model():ZoomModel {
				return _zoomModel;
			}
			

			private function onModelChanged(event:FlexEvent):void {
				restoreScaleSliderValue();
            if(!_isEmbed) {
               visible = _zoomModel.getVisible();
            }
			}

			private function restoreScaleSliderValue():void {
				if (scaleSlider) {
               if (_zoomModel.zoomValue >= ZoomModel.ZOOM_DEFAULT) {
                  scaleSlider.value = 0.5 + 0.5 * (_zoomModel.zoomValue - ZoomModel.ZOOM_DEFAULT) / (ZoomModel.MAX_ZOOM - ZoomModel.ZOOM_DEFAULT);   
               } else {
                  scaleSlider.value = 0.5* (_zoomModel.zoomValue - ZoomModel.MIN_ZOOM) / (ZoomModel.ZOOM_DEFAULT - ZoomModel.MIN_ZOOM);
               }
				}
			}
				
			private function updateScale():void {
				if (_zoomModel) {
               
               
               
               
              var scaleValue:Number  = scaleSlider.value;
              
              var zoomValue:Number  = 1;
               var center:Number = (scaleSlider.maximum - scaleSlider.minimum) / 2;
               if (scaleValue >= center) {
                  zoomValue = ZoomModel.ZOOM_DEFAULT + (scaleValue - center) * (ZoomModel.MAX_ZOOM - ZoomModel.ZOOM_DEFAULT) / center;
               } else {
                  zoomValue = ZoomModel.ZOOM_DEFAULT + (scaleValue - center) * (ZoomModel.ZOOM_DEFAULT - ZoomModel.MIN_ZOOM) / center;
               }
					_zoomModel.zoomValue = Math.floor(zoomValue*100+0.5) / 100
				}
			}
			private function onCreationComplete():void {
				restoreScaleSliderValue();

			}
			
			
			private function onRollOutMinus():void {
				if (_isEmbed) {
					minusScale.source = AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_EMBED_MINUS);
				} else {
					minusScale.source = AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_MINUS);
				}
			}
			private function onRollOverMinus():void {
				if (_isEmbed) {
					minusScale.source = AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_EMBED_MINUS_OVER);
				} else {
					minusScale.source = AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_MINUS_OVER);
				}
			}
			private function onRollOutPlus():void {
				if (_isEmbed) {
					plusScale.source = AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_EMBED_PLUS);
				} else {
					plusScale.source = AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_PLUS);
				}
			}
			private function onRollOverPlus():void {
				if (_isEmbed) {
					plusScale.source = AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_EMBED_PLUS_OVER);
				} else {
					plusScale.source = AssetsManager.getEmbededAsset(PearlDeckAssets.ZOOM_PLUS_OVER);
				}
			}
         private function onRollOverZero():void{
            zeroZoom.source = PearlDeckAssets.ZOOM_ZERO_OVER;
         }
         private function onRollOutZero():void{
            zeroZoom.source = PearlDeckAssets.ZOOM_ZERO;
         }
			private function onRollOver():void{
            
            onRollOverMinus();
            onRollOverPlus();
            onRollOverZero();
         }
         private function onRollOut():void{
            
            onRollOutMinus();
            onRollOutPlus();
            onRollOutZero();
         }
         
         private function getTextFilters(over:uint):Array {
            return NavBar.getNavBarTextFilters(over);
         }
			
			private function onClickPlus():void {
			   
			}
			private function onClickMinus():void {
			   
			}
			private function onClickReset():void {
			   if (_zoomModel) {
			      _zoomModel.resetZoom();
			   }
			}
         
		private var _currentDelta:int =0;
		private static const WheelSpeed:Number = 4;
		private function onWheelChanged(event:MouseEvent):void {
			if (event.delta < 0 && event.altKey) {
				if (_currentDelta >0) {
					_currentDelta = event.delta;
				} else {
					_currentDelta += event.delta
				}
			} else if (event.delta > 0 && event.altKey) {
				if (_currentDelta < 0) {
					_currentDelta = event.delta;
				} else {
					_currentDelta += event.delta
				}
			}
			if (_currentDelta < -WheelSpeed) {
				_zoomModel.decreaseZoom();
				_currentDelta = 0;
			} else if (_currentDelta > WheelSpeed) {
				_zoomModel.increaseZoom();
				_currentDelta = 0;
			}
		}
        
        private var _currentTouchZoom:Number = -1;
        private var _currentStageZoom:Number = -1;        
        public function onZoomGesture(scaleX:Number, scaleY:Number):void {   
            if(_zoomModel) {
                if (_currentStageZoom != _zoomModel.zoomValue) {
                    _currentStageZoom = _zoomModel.zoomValue;
                    _currentTouchZoom = _currentStageZoom;
                }
                var eventZoom:Number = Math.sqrt(Math.pow(scaleX,2) + Math.pow(scaleY,2))/Math.sqrt(2);
                _currentTouchZoom *= eventZoom;
                if (_currentTouchZoom > ZoomModel.MAX_ZOOM) {
                    _currentTouchZoom = ZoomModel.MAX_ZOOM;
                } else if (_currentTouchZoom < ZoomModel.MIN_ZOOM) {
                    _currentTouchZoom = ZoomModel.MIN_ZOOM;
                }
                var margin:Number = 0.0000000000001;
                if (_currentStageZoom - _currentTouchZoom >= ZoomModel.ZOOM_STEP - margin) {
                    _zoomModel.decreaseZoom();
                }
                else if (_currentStageZoom - _currentTouchZoom <= - ZoomModel.ZOOM_STEP + margin){
                    _zoomModel.increaseZoom();
                }
            } 
        }
         
         
         private function minusDown(event:Event):void {
            executeZoomOut(event);
            zoomActionTimer.addEventListener(TimerEvent.TIMER, executeZoomOutOnHold);
            zoomActionTimer.reset();
            zoomActionTimer.start();
         }
         private function minusUpOrOut():void {
            zoomActionTimer.removeEventListener(TimerEvent.TIMER, executeZoomOutOnHold);
            zoomActionTimer.stop();
            minusScale.removeEventListener(Event.ENTER_FRAME, executeZoomOut);
         }
         private function executeZoomOut(event:Event):void {
            if (_zoomModel) {
               _zoomModel.decreaseZoom();
            }
         }
         private function executeZoomOutOnHold(event:Event):void {
            zoomActionTimer.reset();
            zoomActionTimer.removeEventListener(TimerEvent.TIMER, executeZoomOutOnHold);
            minusScale.addEventListener(Event.ENTER_FRAME, executeZoomOut);
         }  
         
         
         
         private function plusDown(event:Event):void {
            executeZoomIn(event);
            zoomActionTimer.addEventListener(TimerEvent.TIMER, executeZoomInOnHold);
            zoomActionTimer.reset();
            zoomActionTimer.start();
         }
         private function plusUpOrOut():void {
            zoomActionTimer.removeEventListener(TimerEvent.TIMER, executeZoomInOnHold);
            zoomActionTimer.stop();
            plusScale.removeEventListener(Event.ENTER_FRAME, executeZoomIn);
         }
         private function executeZoomIn(event:Event):void {
            if (_zoomModel) {
               _zoomModel.increaseZoom();
            }
         }
        private function executeZoomInOnHold(event:Event):void {
           zoomActionTimer.reset();
           zoomActionTimer.removeEventListener(TimerEvent.TIMER, executeZoomInOnHold);
           plusScale.addEventListener(Event.ENTER_FRAME, executeZoomIn);
        }         
         
        
        private function get zoomActionTimer():Timer
        {
           if(!_zoomActionTimer) {
              _zoomActionTimer = new Timer(DELAY, MAX_COUNT);
           }
           return _zoomActionTimer;
        }

        private function set zoomActionTimer(value:Timer):void
        {
           _zoomActionTimer = value;
        }

		]]>
	</mx:Script>
</mx:Canvas>
