<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:button="com.broceliand.ui.button.*"
           xmlns:premiumsymb="com.broceliand.ui.premiumsymbol.*"
           clipContent="false">
   <premiumsymb:PTPremiumSymbolButton  id="symbol"
                                       bindMouseOver="{premiumLabel}"/>
   <button:PTLinkButton id="premiumLabel"
                        height="100%"
                        fontWeight="normal" fontSize="13"
                        fontFamily="{PTStyleManager.DEFAULT_FONT_FAMILY}"           
                        click="onClick(event)"
                        color="{COLOR_PREMIUM_LABEL}"
                        textRollOverColor="{COLOR_PREMIUM_LABEL_OVER_BLUE}"
                        textSelectedColor="{COLOR_PREMIUM_LABEL_OVER_BLUE}"
                        bindMouseOver="{symbol}" />
   
   <mx:Script>
      <![CDATA[
         import com.broceliand.ui.PTStyleManager;
         import com.broceliand.ui.util.ColorPalette;
         import com.broceliand.util.BroLocale;
         
         public static const COLOR_PREMIUM_LABEL_OVER_BLUE:int = ColorPalette.PEARLTREES_DARK_COLOR;
         public static const COLOR_PREMIUM_LABEL:int = 0x505050;
         public static const LABEL_LONG:String = "long";
         public static const LABEL_SHORT:String = "short";
         
         private var _fontWeight:String = "normal";
         private var _skin:uint = PTPremiumSymbolButton.SKIN_MEDIUM;
         private var _fontSize:int = 13;
         private var _clickable:Boolean;
         private var _withOver:Boolean;
         private var _neverVisible:Boolean;
         private var _labelVersion:String = LABEL_LONG;
         private var _premiumLabelY:int = 0;
         private var _premiumSymbolY:int = 0;
         private var _distanceSymbolToLabel:int = 0;
         private var _parametersChanged:Boolean = false;
         private var _withOverLabel:Boolean = true;
         private var _colorOver:int = COLOR_PREMIUM_LABEL_OVER_BLUE;
         
         override protected function commitProperties():void{
            super.commitProperties();
            if (_parametersChanged) {
               setLayout();
               _parametersChanged = false;
            }
            
            
            
            
            
            
            
            
         }
         
         override protected function createChildren():void {
            super.createChildren();
            
            symbol.withOver = _withOver;
            symbol.clickable = _clickable;
            symbol.skin = _skin;
            symbol.refreshSkin();
            premiumLabel.setStyle('textRollOverColor', _withOverLabel ? _colorOver : COLOR_PREMIUM_LABEL);
            premiumLabel.setStyle('textSelectedColor', _withOverLabel ? _colorOver : COLOR_PREMIUM_LABEL);
            premiumLabel.setStyle('fontWeight', _fontWeight);
            setLayout();
            
            
         }
         
         public function get withOver():Boolean {
            return _withOver;
         }
         
         public function set withOver(value:Boolean):void {
            if (_withOver != value) {
               _withOver = value;
               notifyOnChange();
            }
         }
         
         public function get clickable():Boolean {
            return _clickable;
         }
         
         public function set clickable(value:Boolean):void {
            if (_clickable != value) {
               _clickable = value;
               notifyOnChange();
            }
         }
         
         public function get skin():uint {
            return _skin;
         }
         
         public function set skin(value:uint):void {
            if (_skin != value) {
               _skin = value;
               notifyOnChange();
            }
         }
         
         private function setLayout():void {
            if (premiumLabel) {
               premiumLabel.setStyle("fontSize", _fontSize);
               premiumLabel.move(getPremiumSymWidth() + _distanceSymbolToLabel, _premiumLabelY);
               premiumLabel.label = BroLocale.getInstance().getText('premium.symbol.label.' + _labelVersion);
            }
            if (symbol) {
               symbol.skin = _skin;
               symbol.move(0, _premiumSymbolY);
            }
         }
         
         private function getPremiumSymWidth():int {
            switch(_skin) {
               case PTPremiumSymbolButton.SKIN_SMALL: return 16; break;
               case PTPremiumSymbolButton.SKIN_SMALL_BLUE: return 16; break;
               case PTPremiumSymbolButton.SKIN_MEDIUM: return 20; break;
               case PTPremiumSymbolButton.SKIN_MEDIUM_BLUE: return 20; break;
               case PTPremiumSymbolButton.SKIN_BIG: return 20; break;
               default: return 20;
            }
         }
         
         public function setLayoutParams( premiumSymbolYValue:int, premiumLabelYValue:int, 
                                                                   distanceSymbolToLabelValue:int, fontSizeValue:int, 
                                                                                                   labelVersionValue:String = LABEL_LONG):void {
            premiumSymbolY = premiumSymbolYValue;
            premiumLabelY = premiumLabelYValue;
            distanceSymbolToLabel = distanceSymbolToLabelValue;
            fontSize = fontSizeValue;
            labelVersion = labelVersionValue;
         }
         
         private function onClick(event:Event):void {
            if (symbol && _clickable) {
               symbol.onClick(event);
            }
         }
         
         public function isCurrentTargetOfEvent(event:MouseEvent):Boolean {
            return event.target == this || event.target == symbol || event.target == premiumLabel;
         }
         
         public function set labelVersion(value:String):void
         {
            _labelVersion = value;
            notifyOnChange();
         }
         
         public function set premiumLabelY(value:int):void
         {
            if (_premiumLabelY != value) {
               _premiumLabelY = value;
               notifyOnChange();
            }
         }
         
         public function set premiumSymbolY(value:int):void
         {
            if (_premiumSymbolY != value) {
               _premiumSymbolY = value;
               notifyOnChange();
            }         
         }
         
         public function set distanceSymbolToLabel(value:int):void
         {
            if (_distanceSymbolToLabel != value) {
               _distanceSymbolToLabel = value;
               notifyOnChange();
            }
         }
         
         public function set fontSize(value:int):void
         {
            if (_fontSize != value) {
               _fontSize = value;
               notifyOnChange();
            }
         }
         
         public function notifyOnChange():void {
            _parametersChanged = true;
            invalidateProperties();
         }
         
         public function get fontSize():int {
            return _fontSize;
         }
         
         public function get withOverLabel():Boolean
         {
            return _withOverLabel;
         }
         
         public function set withOverLabel(value:Boolean):void
         {
            _withOverLabel = value;
         }
         
         public function get fontWeight():String
         {
            return _fontWeight;
         }
         
         public function set fontWeight(value:String):void
         {
            _fontWeight = value;
         }
         
         public function get colorOver():int
         {
            return _colorOver;
         }
         
         public function set colorOver(value:int):void
         {
            _colorOver = value;
         }
         
         
         
      ]]>
   </mx:Script>  
</mx:Canvas>
